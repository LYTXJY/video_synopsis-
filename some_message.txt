fps = 30
average_width 58
average_height 120

裁剪矩形
 裁剪大小为真正大小的 120%，
 宽度上大概多裁 12，即 top_left_x - 6, right_bottom_x + 6
 长度上大概多裁 24，即 top_left_y - 12, right_bottom_y + 12

冲突判定方式
    本来是一个矩形重合的问题，这里简化为 centroid 在 x 轴，y 轴两个方向上的距离问题
    x 方向上 距离相差 1.5 * average_width = 87     1.3 75.4  2.5 145
    y 方向上 距离相差 1.5 * average_height = 180   1.3 156   2.5 300

    最开始采用的 1.5 * average， 但后面的目标重合很严重，后面改成 2.5 * average，但其实
    目标重合还是很严重，主要还是生成新索引的方式太粗糙了

如何生成新的索引？
1）第一部分，找到所有 target 的“新”第一帧
1. 找到第一帧出现的所有 target， 这些 target 从第一帧开始出现
2. 第一步完成后，找到不与第一步产生的所有 target 冲突的 target
3. 重复以上两步，这里换成第 X 帧，直至所有 target 第一帧都已经形成

2）检测冲突
这里的冲突分为两种，一种为本来就是在同一帧就有冲突的，这里我们叫做第一类冲突
另外一种是因为加入不同时刻的 target 因为速度与其他时刻的 target 不一致，产生了冲突，
这里我们叫做第二类冲突
1. 这里的处理方式都采用一样的处理方式，发现 target_1 与 其他 n 个 target 存在冲突时，
record = n

2. 计算record， 将 {position, record} 都放入同一个数组里，首先是空的，加入新的 target 的
时候，与先前所有的 target 进行一次距离计算

生成视频
根据新的索引将生成新的每一帧，record越大，透明度越高
